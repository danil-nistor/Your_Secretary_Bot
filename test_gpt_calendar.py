from flask import Flask, request, redirect, session
import json
from calendar_service import start_oauth_flow, complete_oauth_flow, create_calendar_event, load_user_token
from gpt import gpt, normalize_event

app = Flask(__name__)
app.secret_key = "your_secret_key_123456"  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–µ—Å—Å–∏–π, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====
TEST_USER_ID = "123456789"  # ‚Üê –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω
REDIRECT_URI = "http://localhost:5000/oauth2callback"

test_message = """
–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è 19.07.2025 –≤ 15:00 –≤—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π. –ù—É–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü. 
–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: –æ—Ñ–∏—Å, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª ‚Ññ3. –ï—â–µ –µ—Å—Ç—å –∏–¥–µ—è –ø—Ä–æ–≤–µ—Å—Ç–∏ 21.07.2025 –º–∏–Ω–∏-—Ö–∞–∫–æ—Ç–æ–Ω –≤ 13.00 –∏ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —É–¥–æ–±–≤—Å—Ç–≤–∞ –≤ –ø—Ä–æ–π–∂—ë—Ç –æ–Ω–ª–∞–π–Ω 
"""

@app.route("/")
def index():
    return """
    <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h2>
    <ul>
      <li><a href="/start">/start</a> ‚Äî –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Google</li>
      <li><a href="/process">/process</a> ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GPT –∏ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ</li>
    </ul>
    """

@app.route("/start")
def start_auth():
    print("–ó–∞–ø—É—Å–∫ OAuth –ø–æ—Ç–æ–∫–∞...")
    try:
        auth_url, state = start_oauth_flow(TEST_USER_ID, REDIRECT_URI)
        print(f"\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {auth_url}")
        return redirect(auth_url)
    except Exception as e:
        print(f"[ERROR] {e}")
        return f"–û—à–∏–±–∫–∞: {e}"

@app.route("/oauth2callback")
def oauth2callback():
    code = request.args.get("code")
    state = request.args.get("state")

    if not code or not state:
        return "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω 'code' –∏–ª–∏ 'state'", 400

    print("\n[INFO] –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
    try:
        user_id, creds = complete_oauth_flow(state, code)
        session['user_id'] = user_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ —Å–µ—Å—Å–∏—é
        print(f"[SUCCESS] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return f"""
        <h2>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</h2>
        <p>–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:</p>
        <a href="/process">/process</a>
        """
    except Exception as e:
        print("[ERROR]", e)
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", 500

@app.route("/process")
def process_message():
    user_id = session.get('user_id')
    if not user_id:
        return "<h2>–û—à–∏–±–∫–∞:</h2><p>–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ <a href='/start'>/start</a></p>"

    print("=== –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Yandex GPT ===")

    raw_result = gpt(test_message)

    print("\n–û—Ç–≤–µ—Ç –æ—Ç GPT:")
    print(raw_result)  # –í—ã–≤–µ–¥–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    if isinstance(raw_result, dict) and 'error' in raw_result:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ GPT:", raw_result['error'])
        return f"<h2>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ GPT:</h2><p>{raw_result['error']}</p>"

    print("\n=== –®–∞–≥ 2: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö ===")

    normalized_events = []

    if isinstance(raw_result, dict):
        normalized_events.append(normalize_event(raw_result))
    elif isinstance(raw_result, list):
        for event_data in raw_result:
            normalized_events.append(normalize_event(event_data))
    else:
        print("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT.")
        return "<h2>–û—à–∏–±–∫–∞:</h2><p>–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT.</p>"

    print("\n–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Calendar API:")
    print(json.dumps(normalized_events, indent=2, ensure_ascii=False))

    print("\n=== –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è(–∏–π) –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ ===")

    results = []
    for event_data in normalized_events:
        result = create_calendar_event(user_id, event_data)
        results.append(result)

        if "error" in result:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ '{event_data.get('–Ω–∞–∑–≤–∞–Ω–∏–µ')}': {result['error']}")
        else:
            print(f"–°–æ–±—ã—Ç–∏–µ '{event_data.get('–Ω–∞–∑–≤–∞–Ω–∏–µ')}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")

    output = "<h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h2><ul>"
    has_success = False
    has_error = False

    for res in results:
        name = res.get("summary", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        if "htmlLink" in res:
            has_success = True
            output += f"<li>‚úÖ <a href='{res['htmlLink']}' target='_blank'>{name}</a></li>"
        elif "error" in res:
            has_error = True
            output += f"<li>‚ùå {name}: {res['error']}</li>"

    output += "</ul>"

    if has_success:
        output += "<p><strong>üéâ –°–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –≤ Google Calendar!</strong></p>"
    if has_error:
        output += "<p><strong>‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å.</strong></p>"

    return output

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google Calendar API...")
    print("–û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    app.run(host="localhost", port=5000, debug=True)