
import telebot
from telebot import types
import requests
import os
from calendar_service import start_oauth_flow, complete_oauth_flow, create_calendar_event
from flask import Flask, request, session
import threading
import json  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è OAuth callback
app = Flask(__name__)
REDIRECT_URI = "http://localhost:5000/oauth2callback"
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
TOKEN = '7485538194:AAFFAPgQE1NZOsQ6wJ5V9GYeBXJ4AqhCeNU'
bot = telebot.TeleBot(TOKEN)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Yandex GPT
id_ya = ""
key_ya = ""
# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def run_flask_app():
    app.run(host='0.0.0.0', port=5000)

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
flask_thread = threading.Thread(target=run_flask_app)
flask_thread.daemon = True
flask_thread.start()

@app.route("/")
def home():
    return "Secretary Bot OAuth Server is running!"

@app.route("/oauth2callback")
def oauth2callback():
    code = request.args.get("code")
    state = request.args.get("state")
    
    print(f"[DEBUG] OAuth callback received - code: {code[:10]}..., state: {state}")
    
    if not code or not state:
        return "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω code –∏–ª–∏ state", 400
    
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º state –Ω–∞ chat_id –∏ user_id
        parts = state.split('_')
        if len(parts) < 2:
            print(f"[ERROR] Invalid state format: {state}")
            return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç state", 400
            
        chat_id, user_id = parts[0], parts[1]
        print(f"[DEBUG] Extracted chat_id: {chat_id}, user_id: {user_id}")
        
        user_id, creds = complete_oauth_flow(state, code)
        
        bot.send_message(chat_id, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Calendar –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        return "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç—É –≤–∫–ª–∞–¥–∫—É."
    except Exception as e:
        print(f"[ERROR] OAuth callback error: {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        chat_id = state.split('_')[0] if state and '_' in state else None
        if chat_id:
            try:
                bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", 500

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å!", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get('step') == 'confirm_event')
def handle_confirmation(message):
    print(f"[DEBUG] handle_confirmation called with text: {message.text}")
    print(f"[DEBUG] user_states for chat_id {message.chat.id}: {user_states.get(message.chat.id)}")
    
    if message.text == '‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å':
        print(f"[DEBUG] Processing '–î–∞, –¥–æ–±–∞–≤–∏—Ç—å' for user {message.from_user.id}")
        try:
            event_data_str = user_states[message.chat.id]['event_data']
            print(f"[DEBUG] Event data string: {event_data_str}")
            event_data = json.loads(event_data_str)
            user_id = message.from_user.id
            print(f"[DEBUG] Parsed event_data: {event_data}")
            print(f"[DEBUG] user_id: {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ event_data —Å–ø–∏—Å–∫–æ–º (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π)
            if isinstance(event_data, list):
                for event in event_data:
                    print(f"[DEBUG] Creating calendar event for: {event}")
                    result = create_calendar_event(user_id, event)
                    print(f"[DEBUG] Calendar event result: {result}")
                    if "error" in result:
                        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {result['error']}")
                    else:
                        event_link = result.get("htmlLink", "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        bot.send_message(message.chat.id, f"–°–æ–±—ã—Ç–∏–µ '{event.get('–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', event.get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n{event_link}")
            else:
                # –û–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ
                print(f"[DEBUG] Creating single calendar event: {event_data}")
                result = create_calendar_event(user_id, event_data)
                print(f"[DEBUG] Calendar event result: {result}")
                if "error" in result:
                    bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {result['error']}")
                else:
                                event_link = result.get("htmlLink", "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                                bot.send_message(message.chat.id, f"–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n{event_link}")
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                                btn_back = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                                markup.add(btn_back)
                                bot.send_message(message.chat.id, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=markup)
                    
        except json.JSONDecodeError as e:
            print(f"[ERROR] JSON decode error: {e}")
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è")
        except Exception as e:
            print(f"[ERROR] Exception in handle_confirmation: {e}")
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        
    elif message.text == '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å':
        print(f"[DEBUG] Processing '–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å' for user {message.from_user.id}")
        bot.send_message(message.chat.id, "–°–æ–±—ã—Ç–∏–µ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_back = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
        markup.add(btn_back)
        bot.send_message(message.chat.id, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=markup)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.chat.id in user_states:
        del user_states[message.chat.id]
        print(f"[DEBUG] Cleared user_states for chat_id {message.chat.id}")

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
        btn2 = types.KeyboardButton('–ú–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å')
        btn3 = types.KeyboardButton('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Google Calendar')
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ':
        msg = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏–∏!')
        bot.register_next_step_handler(msg, process_event_description)

    elif message.text == '–ú–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å':
        bot.send_message(message.chat.id, '–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à Google Calendar: https://calendar.google.com')

    elif message.text == '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Google Calendar':
        start_auth(message)
        
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
        btn2 = types.KeyboardButton('–ú–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å')
        btn3 = types.KeyboardButton('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Google Calendar')
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

def start_auth(message):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ user_id –≤ state –¥–ª—è callback
        state = f"{message.chat.id}_{message.from_user.id}"
        auth_url, _ = start_oauth_flow(message.from_user.id, REDIRECT_URI, state)
        
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", url=auth_url)
        markup.add(btn)
        
        bot.send_message(
            message.chat.id,
            "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:",
            reply_markup=markup
        )
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")

def process_event_description(message):
    try:
        event_text = message.text
        print(f"[DEBUG] Processing event description: {event_text}")
        structured_data = gpt(event_text)
        print(f"[DEBUG] GPT response: {structured_data}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        try:
            json.loads(structured_data)
            print(f"[DEBUG] JSON is valid")
        except json.JSONDecodeError as e:
            print(f"[ERROR] Invalid JSON from GPT: {e}")
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[message.chat.id] = {
            'event_data': structured_data,
            'step': 'confirm_event'
        }
        print(f"[DEBUG] Set user_states for chat_id {message.chat.id}: {user_states[message.chat.id]}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        bot.send_message(
            message.chat.id,
            f"–Ø —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ:\n\n{structured_data}\n\n–î–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å?",
            reply_markup=create_confirmation_markup()
        )
        
    except Exception as e:
        print(f"[ERROR] Exception in process_event_description: {e}")
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")

def create_confirmation_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å')
    btn2 = types.KeyboardButton('‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å')
    markup.add(btn1, btn2)
    return markup

def gpt(text):
    prompt = {
        "modelUri": f"gpt://{id_ya}/yandexgpt",
        "completionOptions": {
            "stream": False,
            "temperature": 0.6,
            "maxTokens": "2000"
        },
        "messages": [
            {
                'role':'system',
                'text': '''
-–¢—ã –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –≥—É–≥–ª-–∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é
-–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –≤—ã—Ç—è–Ω—É—Ç—å –∏–∑ —ç—Ç–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤—ã—Ç–∞—â–∏—Ç—å –¥–∞—Ç—É, –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ json
-–ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Ç–æ —Ç—ã —Ç–∞–∫–∂–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ json —Ñ–∞–π–ª–µ, —Å—Ç–æ—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞—è —Å–≤–∑—è–Ω–∞–Ω–Ω–æ—Å—Ç—å: –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∏ –≤—ã–¥–∞—ë—à—å —ç—Ç–æ –æ–¥–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
-–¢—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å –¢–û–õ–¨–ö–û json –æ—Ç–≤–µ—Ç
-–î–∞—Ç—É –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ: dd.mm.yyyy
-–ï—Å–ª–∏ –≥–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ —Ç–µ–∫—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π 2025 –≥–æ–¥
-–ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–æ –µ—Å—Ç—å —Å–ª–æ–≤–∞ –ø–æ —Ç–∏–ø—É: "–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–í —Å–ª–µ–¥—É—é—â—É—é –ø—è—Ç–Ω–∏—Ü—É" –∏ —Ç.–¥. —Ç–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–º –ø–æ–ª–µ –æ—Å—Ç–∞–≤—å: "–ù–µ—è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞"
-–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–∏ –≤ JSON: "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ" (–Ω–∞–∑–≤–∞–Ω–∏–µ), "–¥–∞—Ç–∞", "–≤—Ä–µ–º—è", "–æ–ø–∏—Å–∞–Ω–∏–µ", "–º–µ—Å—Ç–æ"
'''
            },
            {
                "role": "user",
                "text": text
            }
        ]
    }

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {key_ya}"
    }

    response = requests.post(url, headers=headers, json=prompt)
    if response.status_code != 200:
        raise Exception(f"Yandex GPT API error: {response.text}")
        
    result = response.json().get('result', {})
    if not result:
        raise Exception("Empty response from Yandex GPT")
        
    alternatives = result.get('alternatives', [])
    if not alternatives:
        raise Exception("No alternatives in response")
        
    response_text = alternatives[0].get('message', {}).get('text', '')
    if not response_text:
        raise Exception("Empty response text")

    # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫
    if response_text.startswith("```") and response_text.endswith("```"):
        response_text = response_text[3:-3].strip()
    elif response_text.startswith("```json") and response_text.endswith("```"):
        response_text = response_text[7:-3].strip()
        
    return response_text

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)